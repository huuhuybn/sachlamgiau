#!/usr/bin/env python3
"""
Script t·∫°o favicon t·ª´ SVG
Chuy·ªÉn ƒë·ªïi favicon.svg th√†nh c√°c file PNG v·ªõi k√≠ch th∆∞·ªõc kh√°c nhau
"""

import os
import subprocess
import sys

def check_dependencies():
    """Ki·ªÉm tra c√°c dependency c·∫ßn thi·∫øt"""
    try:
        subprocess.run(['rsvg-convert', '--version'], capture_output=True, check=True)
        print("‚úÖ rsvg-convert ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå rsvg-convert ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print("üì¶ C√†i ƒë·∫∑t tr√™n macOS: brew install librsvg")
        print("üì¶ C√†i ƒë·∫∑t tr√™n Ubuntu: sudo apt-get install librsvg2-bin")
        return False

def generate_favicon_png(input_svg, output_png, size):
    """T·∫°o file PNG t·ª´ SVG v·ªõi k√≠ch th∆∞·ªõc c·ª• th·ªÉ"""
    try:
        cmd = [
            'rsvg-convert',
            '--width', str(size),
            '--height', str(size),
            '--output', output_png,
            input_svg
        ]
        subprocess.run(cmd, check=True)
        print(f"‚úÖ ƒê√£ t·∫°o {output_png} ({size}x{size})")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi t·∫°o {output_png}: {e}")
        return False

def create_placeholder_png(filename, size):
    """T·∫°o file PNG placeholder ƒë∆°n gi·∫£n"""
    try:
        # S·ª≠ d·ª•ng ImageMagick ho·∫∑c Pillow ƒë·ªÉ t·∫°o placeholder
        from PIL import Image, ImageDraw, ImageFont
        
        # T·∫°o h√¨nh ·∫£nh m·ªõi
        img = Image.new('RGBA', (size, size), (102, 126, 234, 255))
        draw = ImageDraw.Draw(img)
        
        # V·∫Ω h√¨nh tr√≤n
        margin = size // 8
        draw.ellipse([margin, margin, size - margin, size - margin], 
                    fill=(255, 215, 0, 255), outline=(139, 69, 19, 255), width=2)
        
        # Th√™m text "S" (S√°ch)
        try:
            font_size = size // 4
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", font_size)
        except:
            font = ImageFont.load_default()
        
        text = "S"
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (size - text_width) // 2
        y = (size - text_height) // 2
        draw.text((x, y), text, fill=(44, 62, 80, 255), font=font)
        
        img.save(filename)
        print(f"‚úÖ ƒê√£ t·∫°o {filename} ({size}x{size}) - placeholder")
        return True
        
    except ImportError:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o {filename} - Pillow ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o {filename}: {e}")
        return False

def main():
    """H√†m ch√≠nh"""
    print("üé® T·∫†O FAVICON CHO WEBSITE")
    print("=" * 40)
    
    # Ki·ªÉm tra file SVG
    if not os.path.exists('favicon.svg'):
        print("‚ùå Kh√¥ng t√¨m th·∫•y favicon.svg")
        return
    
    # Danh s√°ch favicon c·∫ßn t·∫°o
    favicons = [
        ('favicon-16x16.png', 16),
        ('favicon-32x32.png', 32),
        ('apple-touch-icon.png', 180)
    ]
    
    success_count = 0
    
    for filename, size in favicons:
        if os.path.exists('favicon.svg'):
            # Th·ª≠ convert t·ª´ SVG
            if generate_favicon_png('favicon.svg', filename, size):
                success_count += 1
            else:
                # Fallback: t·∫°o placeholder
                if create_placeholder_png(filename, size):
                    success_count += 1
        else:
            # T·∫°o placeholder n·∫øu kh√¥ng c√≥ SVG
            if create_placeholder_png(filename, size):
                success_count += 1
    
    print(f"\nüìä K·∫æT QU·∫¢: {success_count}/{len(favicons)} favicon ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    if success_count == len(favicons):
        print("üéâ T·∫•t c·∫£ favicon ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
    else:
        print("‚ö†Ô∏è M·ªôt s·ªë favicon ch∆∞a ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ki·ªÉm tra l·∫°i.")

if __name__ == "__main__":
    main() 